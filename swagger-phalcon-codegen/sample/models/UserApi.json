{
  "importPath" : "PetStore\\V1000\\Controllers.User",
  "licenseUrl" : "http://www.apache.org/licenses/LICENSE-2.0.html",
  "appVersion" : "1.0.0",
  "package" : "PetStore\\V1000\\Controllers",
  "imports" : [ {
    "import" : "PetStore\\V1000\\Models\\User"
  } ],
  "modelPackage" : "PetStore\\V1000\\Models",
  "artifactVersion" : "1.0.0",
  "appName" : "Swagger Petstore",
  "groupId" : "io.swagger",
  "contextPath" : "/v2",
  "appDescription" : "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\\\"http://swagger.io\\\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \\\"special-key\\\" to test the authorization filters",
  "invokerPackage" : "PetStore\\V1000",
  "licenseInfo" : "Apache 2.0",
  "classVarName" : "user",
  "version" : "1.0.0",
  "operations" : {
    "classname" : "UserApi",
    "operation" : [ {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "path" : "/user",
      "operationId" : "createUser",
      "httpMethod" : "POST",
      "summary" : "Create user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Created user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Created user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"successful operation\"\n}",
        "wildcard" : true
      } ],
      "imports" : [ "User" ],
      "nickname" : "createUser"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "path" : "/user/createWithArray",
      "operationId" : "createUsersWithArrayInput",
      "httpMethod" : "POST",
      "summary" : "Creates list of users with given input array",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"successful operation\"\n}",
        "wildcard" : true
      } ],
      "imports" : [ "User", "array" ],
      "nickname" : "createUsersWithArrayInput"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "path" : "/user/createWithList",
      "operationId" : "createUsersWithListInput",
      "httpMethod" : "POST",
      "summary" : "Creates list of users with given input array",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      },
      "allParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "isContainer" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "array[User]",
        "description" : "List of user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"List of user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"type\" : \"array\",\n    \"items\" : {\n      \"$ref\" : \"#/definitions/User\"\n    }\n  }\n}"
      } ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"successful operation\"\n}",
        "wildcard" : true
      } ],
      "imports" : [ "User", "array" ],
      "nickname" : "createUsersWithListInput"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "returnTypeIsPrimitive" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "path" : "/user/login",
      "operationId" : "loginUser",
      "returnType" : "string",
      "httpMethod" : "GET",
      "returnBaseType" : "string",
      "summary" : "Logs user into the system",
      "notes" : "",
      "baseName" : "User",
      "defaultResponse" : "null",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "allParams" : [ {
        "isQueryParam" : true,
        "hasMore" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The user name for login",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"query\",\n  \"description\" : \"The user name for login\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}"
      }, {
        "isQueryParam" : true,
        "secondaryParam" : true,
        "baseName" : "password",
        "paramName" : "password",
        "dataType" : "string",
        "description" : "The password for login in clear text",
        "jsonSchema" : "{\n  \"name\" : \"password\",\n  \"in\" : \"query\",\n  \"description\" : \"The password for login in clear text\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}"
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ {
        "isQueryParam" : true,
        "hasMore" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The user name for login",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"query\",\n  \"description\" : \"The user name for login\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}"
      }, {
        "isQueryParam" : true,
        "secondaryParam" : true,
        "baseName" : "password",
        "paramName" : "password",
        "dataType" : "string",
        "description" : "The password for login in clear text",
        "jsonSchema" : "{\n  \"name\" : \"password\",\n  \"in\" : \"query\",\n  \"description\" : \"The password for login in clear text\",\n  \"required\" : false,\n  \"type\" : \"string\"\n}"
      } ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "dataType" : "string",
        "baseType" : "string",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "schema" : {
          "type" : "string"
        },
        "jsonSchema" : "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"type\" : \"string\"\n  }\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username/password supplied",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"Invalid username/password supplied\"\n}",
        "wildcard" : false
      } ],
      "imports" : [ ],
      "examples" : [ {
        "contentType" : "application/json",
        "example" : "\"aeiou\""
      }, {
        "contentType" : "application/xml",
        "example" : "string"
      } ],
      "nickname" : "loginUser"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasMore" : true,
      "path" : "/user/logout",
      "operationId" : "logoutUser",
      "httpMethod" : "GET",
      "summary" : "Logs out current logged in user session",
      "notes" : "",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "allParams" : [ ],
      "bodyParams" : [ ],
      "pathParams" : [ ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "0",
        "message" : "successful operation",
        "hasMore" : false,
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"successful operation\"\n}",
        "wildcard" : true
      } ],
      "imports" : [ ],
      "nickname" : "logoutUser"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "returnSimpleType" : true,
      "hasMore" : true,
      "path" : "/user/{username}",
      "operationId" : "getUserByName",
      "returnType" : "User",
      "httpMethod" : "GET",
      "returnBaseType" : "User",
      "summary" : "Get user by user name",
      "notes" : "",
      "baseName" : "User",
      "defaultResponse" : "null",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The name that needs to be fetched. Use user1 for testing. ",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The name that needs to be fetched. Use user1 for testing. ",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be fetched. Use user1 for testing. \",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"User not found\"\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "200",
        "message" : "successful operation",
        "hasMore" : true,
        "examples" : [ {
          "contentType" : "application/json",
          "example" : {
            "id" : 1,
            "username" : "johnp",
            "firstName" : "John",
            "lastName" : "Public",
            "email" : "johnp@swagger.io",
            "password" : "-secret-",
            "phone" : "0123456789",
            "userStatus" : 0
          }
        } ],
        "dataType" : "User",
        "baseType" : "User",
        "isDefault" : true,
        "simpleType" : true,
        "primitiveType" : false,
        "schema" : {
          "$ref" : "#/definitions/User"
        },
        "jsonSchema" : "{\n  \"description\" : \"successful operation\",\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  },\n  \"examples\" : {\n    \"application/json\" : {\n      \"id\" : 1,\n      \"username\" : \"johnp\",\n      \"firstName\" : \"John\",\n      \"lastName\" : \"Public\",\n      \"email\" : \"johnp@swagger.io\",\n      \"password\" : \"-secret-\",\n      \"phone\" : \"0123456789\",\n      \"userStatus\" : 0\n    }\n  }\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username supplied",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"Invalid username supplied\"\n}",
        "wildcard" : false
      } ],
      "imports" : [ "User" ],
      "examples" : [ {
        "contentType" : "application/json",
        "example" : "{\n  \"id\" : 1,\n  \"username\" : \"johnp\",\n  \"firstName\" : \"John\",\n  \"lastName\" : \"Public\",\n  \"email\" : \"johnp@swagger.io\",\n  \"password\" : \"-secret-\",\n  \"phone\" : \"0123456789\",\n  \"userStatus\" : 0\n}"
      } ],
      "nickname" : "getUserByName"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "hasMore" : true,
      "path" : "/user/{username}",
      "operationId" : "updateUser",
      "httpMethod" : "PUT",
      "summary" : "Updated user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "bodyParam" : {
        "isBodyParam" : true,
        "secondaryParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      },
      "allParams" : [ {
        "isPathParam" : true,
        "hasMore" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "name that need to be deleted",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"name that need to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      }, {
        "isBodyParam" : true,
        "secondaryParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      } ],
      "bodyParams" : [ {
        "isBodyParam" : true,
        "baseName" : "body",
        "paramName" : "body",
        "dataType" : "User",
        "description" : "Updated user object",
        "jsonSchema" : "{\n  \"in\" : \"body\",\n  \"name\" : \"body\",\n  \"description\" : \"Updated user object\",\n  \"required\" : false,\n  \"schema\" : {\n    \"$ref\" : \"#/definitions/User\"\n  }\n}"
      } ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "name that need to be deleted",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"name that need to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"User not found\"\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid user supplied",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"Invalid user supplied\"\n}",
        "wildcard" : false
      } ],
      "imports" : [ "User" ],
      "nickname" : "updateUser"
    }, {
      "responseHeaders" : [ ],
      "hasProduces" : true,
      "hasParams" : true,
      "path" : "/user/{username}",
      "operationId" : "deleteUser",
      "httpMethod" : "DELETE",
      "summary" : "Delete user",
      "notes" : "This can only be done by the logged in user.",
      "baseName" : "User",
      "produces" : [ {
        "hasMore" : "true",
        "mediaType" : "application/json"
      }, {
        "hasMore" : null,
        "mediaType" : "application/xml"
      } ],
      "allParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The name that needs to be deleted",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      } ],
      "bodyParams" : [ ],
      "pathParams" : [ {
        "isPathParam" : true,
        "baseName" : "username",
        "paramName" : "username",
        "dataType" : "string",
        "description" : "The name that needs to be deleted",
        "jsonSchema" : "{\n  \"name\" : \"username\",\n  \"in\" : \"path\",\n  \"description\" : \"The name that needs to be deleted\",\n  \"required\" : true,\n  \"type\" : \"string\"\n}",
        "required" : true
      } ],
      "queryParams" : [ ],
      "headerParams" : [ ],
      "formParams" : [ ],
      "tags" : [ "User" ],
      "responses" : [ {
        "headers" : [ ],
        "code" : "404",
        "message" : "User not found",
        "hasMore" : true,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"User not found\"\n}",
        "wildcard" : false
      }, {
        "headers" : [ ],
        "code" : "400",
        "message" : "Invalid username supplied",
        "hasMore" : false,
        "isDefault" : false,
        "simpleType" : true,
        "primitiveType" : true,
        "isMapContainer" : false,
        "isListContainer" : false,
        "jsonSchema" : "{\n  \"description\" : \"Invalid username supplied\"\n}",
        "wildcard" : false
      } ],
      "imports" : [ ],
      "nickname" : "deleteUser"
    } ]
  },
  "basePath" : "http://petstore.swagger.io/v2",
  "classname" : "UserApi",
  "infoUrl" : null,
  "namespace" : "PetStore",
  "infoEmail" : "apiteam@swagger.io",
  "artifactId" : "swagger-client",
  "baseName" : "User"
}